/**
 * * 문제 설명
 * 직사각형을 만드는 데 필요한 4개의 점 중 3개의 좌표가 주어질 때, 나머지 한 점의 좌표를 구하려고 합니다.
 * 점 3개의 좌표가 들어있는 배열 v가 매개변수로 주어질 때, 직사각형을 만드는 데 필요한 나머지 한 점의 좌표를 return 하도록 solution 함수를 완성해주세요.
 * 단, 직사각형의 각 변은 x축, y축에 평행하며, 반드시 직사각형을 만들 수 있는 경우만 입력으로 주어집니다.
 * * 제한사항
 * - v는 세 점의 좌표가 들어있는 2차원 배열입니다.
 * - v의 각 원소는 점의 좌표를 나타내며, 좌표는 [x축 좌표, y축 좌표] 순으로 주어집니다.
 * - 좌표값은 1 이상 10억 이하의 자연수입니다.
 * - 직사각형을 만드는 데 필요한 나머지 한 점의 좌표를 [x축 좌표, y축 좌표] 순으로 담아 return 해주세요.
 *
 * ! XOR 활용 비트 연산자를 활용해서 가능하다.
 */

// * 내가 낸 답안 (통과)
function solution(v) {
  var x, y;

  if (v[0][0] === v[1][0]) {
    x = v[2][0];
  } else if (v[0][0] === v[2][0]) {
    x = v[1][0];
  } else {
    x = v[0][0];
  }

  if (v[0][1] === v[1][1]) {
    y = v[2][1];
  } else if (v[0][1] === v[2][1]) {
    y = v[1][1];
  } else {
    y = v[0][1];
  }

  return [x, y];
}

// * 설명 및 더 좋은 방법
function master_solution(v) {
  var answer = [0, 0];

  for (var i = 0; i < 3; i++) {
    answer[0] ^= v[i][0];
    answer[1] ^= v[i][1];
  }

  return answer;
}

// * 결과

const result1 = solution([
  [1, 1],
  [1, 2],
  [2, 1],
]);

const result2 = master_solution([
  [1, 3],
  [1, 10],
  [3, 3],
]);

console.log(result1); // 기대값 [2,2]
console.log(result2); // 기대값 [3.10]
